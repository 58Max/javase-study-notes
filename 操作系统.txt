# 三大调度

> 高级调度

高级调度又称作业调度或长程算法，根据某种算法将外存上处于后备作业队列的若干个作业调入内存，为作业分配所需资源并创建相应的进程。









# 进程

http://courses.cs.vt.edu/csonline/OS/Lessons/Processes/index.html



# 分页存储管理方式

==离散分配方式分为 分页存储管理 和 分段存储管理方式==

==根据运行前是否将作业全部装入内存，分为基本分页（段）存储管理方式和请求分页（段）存储管理方式==

> 基本分页（段）存储管理方式：
>
> ​           要求作业在内存中存储的位置不一定连续，但在执行作业时一定要一次性全部装入内存



>请求分页（段）存储管理：
>
>​            不要求作业执行前一次性全部装入，只要装入部分即可



### 分页式存储管理

#### 页面

 存储进程时应该页面大小合适，因为进程长度不会正好是页面大小的整数倍，所以存储该进程的最后的页面会存在碎叶（没事完全使用页面）



#### 页表

分页式存储管理虽然允许进程的各个页存储在内存中不同的物理块中，但是当进程运行时，系统能够准确的找到散落在内存中不同物理块。为此，系统需要记录进程逻辑页与内存物理块之间的对应关系。系统通常通过为每个进程建立的页面映像来实现，简称为"页表"

==页表的作用就是实现页号到物理块的映射==

![image-20200729204721723](C:\Users\58max\AppData\Roaming\Typora\typora-user-images\image-20200729204721723.png)





### 分段式存储管理

信息共享和信息保护引出了分段式存储管理，一段为单位进行信息保护更易于实现。

动态链接技术中也要求以段为管理单位，分段存储管理更便于实现动态链接



#### 分段

作业的地址空间是按照用户编程时划分的段分为若干个部分，进程的各个段可以在内存中可以不连续存放，但是一个段必须是在内存上 连续存放的。内存中的各段的长度是由用户程序来指定的，所以内存中的各段的长度不同

#### 段表

在分段式存储系统中，为使进程的正常进行，系统为每一个进程建立了一张把逻辑段映射成段在物理内存中的起始地址的段映射表

意思是段表中只有 段号 + 段长+段在内存中的物理起始地址

段表作用：==实现从段号到物理地址的地址 映射和指定段长的作用，段表一般常用所以常驻内存==

![image-20200729210027547](C:\Users\58max\AppData\Roaming\Typora\typora-user-images\image-20200729210027547.png)*