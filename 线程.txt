    线程
=====================
线程的基本概念：

程序------进程---------线程
程序：未完成特定任务，用某种语言编写的一组指令的集合
进程：程序的一次执行过程，或是正在执行的一个程序。
        动态：自身的产生、存在和消亡的过程
线程： 进程可进一步化为线程，是一个程序内部的一条执行路线。

==============================
多线程的创建和启动

  java.lang.Thread类
  接口： Runnable
   Thread对象.start()用来启动线程
   线程把run()方法当做主体

===================

创建线程的两种方式
===================
继承Thread类

 Thread()；创建Thread对象
 Thread(String threadname);创建线程并指定实例名

===========================
实现 Runnable接口

  Thread(Runnable target);指定创建线程的目标对象，对象实现了Runnable接口的run()方法
 Thread(Runnable target,String name) 创建新的目标对象 传进来的线程名称可以再Runnale实现类中用Thread.currentThread().getName()获得

=========================
两种方式的联系与区别
=====================
区别

一者是继承Thread类   重写run（）方法
二者实现Runnable接口   实现run（）方法
实现方法的好处
1）避免了单继承的局限性
2）多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程共享一个资源

一般使用接口实现方式
==================
Thread的相关方法

 run（）；线程在被调度时执行的操作
void start();启动线程，不执行对象的run（）方法
String getName();返回线程的名称
void setName(String name)；设置该线程的名称
static currentThread（）;返回当前线程
getPriority();返回线程优先值（优先级分为1-10，数字越大优先级越高，默认是 5）线程创建时继承父线程的优先级
setPriority(int newPriority);改变线程的优先级  
static void yield();线程让步，暂停当前正在执行的线程，把执行机会让给优先级相同或者更高的线程。若队列中没有同优先级的线程，忽略此方法。
join()；当某个程序执行流中调用其他线程的join()方法时，调用线程将被阻塞，直到join()方法加入的join线程执行完成为止
static void sleep(long mills)(指定时间： 毫秒)令当前活动线程在指定时间段内放弃对CPU的控制，使其他线程有机会被执行，时间到后重新排队。抛出InterruptedException异常
stop();强制线程生命期结束，强制停止此线程
boolean isAlive();返回boolean，判断线程是否还活着

==================================
线程的生命周期

五种状态： 新建---就绪----运行---阻塞（不一定发生）----死亡

   阻 塞   ------->    就 绪
 sleep()           sleep()时间到了
等待同步锁         获取同步锁
wait()                  notify()
join()                  notifyAll()
suspend()           resume()

=============================
线程的同步与死锁

在方法上加  synchronized 同步锁关键字
 在普通方法上加同步锁 synchronized，锁的是当前的整个的对象，不是某个方法，不同的对象就是不同的锁，当前对象所有加了同步锁的方法共用一个同步锁
  在静态static方法加上同步锁synchronized，对所有的对象都是同一个锁 锁的是class文件
  使用同步锁syncharonized去锁一个代码块，使用this锁代码块代表当前的对象，如果在其他方法中也用同步锁syncharoized，两个使用的是一个同步锁
  synchronized（obj）根据不同的对象有不同的锁，obj为要锁的对象

===============================
线程通信

wait()；令当前线程挂起并放弃CPU，同步资源，使别的线程可访问并修改共享资源，而当前线程排队等候再次对资源的访问
notify()；唤醒正在排队等待同步资源的线程中优先级最高者，结束等待
notifyAll();唤醒正在排队等待资源的所有线程结束等待
***这三种方法均属于Object方法并且只有在 synchronized方法或者synchronized 代码块中才能使用

