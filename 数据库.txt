目前的数据库均为关系型数据库

MySQL的结构
先有数据库->再有表->再有数据
通过sql语句对mysql数据库进行管理

查询所有数据库
show databases;

创建数据库
create database 数据库名 default character set 字符编码 collate 字符编码校验规则;
create database demo default character set utf8 collate utf8_general_ci;

修改数据库（一般修改字符编码）
alter database 数据库名 default character set gbk；
alter database demo defult character set gbk;

删除数据库
drop database 数据库名
drop database demo;

=======================================

表的概念与数据类型

表 - 表名 - 字段(字段名 字段数据类型 (varchar int nvarchar))

数据类型
浮点型
float(m,d)单精度浮点型 m总个数 ，d小数位
double(m,d)双精度浮点型 m总个数 ，d小数位

定点数
decimal(m,d) m<65 d<30 d<m

浮点型数据在存储的时候小数位是有不精确的部分，所以有一部分数据是不适合用浮点型表示,得使用定点数来表示。
浮点型在数据库中存放的的是近似值，定点数在数据库中存放的是精确值

==================================

字段的类型数据
字符串
char(n) 固定长度 最多255个字符 char默认最长长度
varchar(n) 固定长度，最多65535个字符 varchar默认最长长度
tinytext 可变长度 最多255个字符
text 可变长度  最多65545个字符
mediumtext 可变长度 最多 2的24次方-1个字符
longtext 可变长度 最多2的32次方-1个字符

二进制数据 （可以把图片或者将其它文件转化为二进制）
TINYBLOB 可变长度 最多255个字符的二进制
BLOB 可变长度 最多65535个字符的二进制
MEDIUMBLOB 可变长度 最多2的24次方-1个字符的二进制
LONGBLOB 可变长度 最多2的32次方-1个字符的二进制

=============================================

日期类型
date 日期 年月日 219-01-01
time 时间 小时分秒 00:00:00
datetime  年月日小时分秒 219-01-01 00:00:00
timestamp 年月日小时分秒 219-01-01 00:00:00

TIMESTAMP和DATETIME不同点
储存方式不一样：对于TIMESTAMP，他会把客户端出入的时间转化为UTC(世界标准时间)进行存储
，查询时将其又转化为客户端时区进行返回。DATETIME，不做任何改变，基本上原样输入输出。
存储的时间范围不一样
timestamp所能存储的时间范围：'1970-01-01 00:00:01.000000'到'2038-01-19 03：14：07.999999'
datetime所能存储的时间范围：'1000-01-01 00:00:00.000000'到'9999-12-31 23:59:59.999999'

==============================

表的查看，添加，删除

#切换表
use demo;

#常见一个student表
create table student(
id int PRIMARY KEY,#主键 这是唯一的一个值
name VARCHAR(100),
age int(2)
)

#查看数据库中有哪些表
show tables;

#查看表的结构
# DESCRIBE 表名;
DESCRIBE student;

#删除表
#drop table 表名;
drop table student;

=====================================

表的修改

#修改表

#添加字段
#单行添加
#alter table student add column 添加的字段的名称 字段的数据类型及默认值
alter table student add column sex varchar(2) DEFAULT '男';
批量添加
alter table student add a int ,add b int ,add c int;

#修改字段的数据类型
#alter table 表名 modify COLUMN 字段 新的数据类型
alter table student modify column sex char(4);

#修改字段的名称
#alter table 表明 change column 原字段名 新字段名 字段的数据类型
alter table student change column a a1 int;

#删除字段
#删除单个字段
alter table student drop COLUMN a1;
#删除多个字段
alter table student drop COLUMN b,drop COLUMN c;

#修改表名
#alter table 原表名 rename to 新表名;
alter table student rename to stu;

======================================

数据查询

=====================================
数据的查询与插入

#查询表的所有数据
#select * from 表名;
select * from student;

#插入数据
#单条全量插入数据（每个字段都出入）
#insert into 表名 VALUES(按照表中的所有字段顺序对应插入);
insert into student VALUES(1,'张三',21,'男');
#单挑指定字段插入数据
#insert into 表名(字段名) VALUES(按照前面指定插入的数据的顺序保持一致);
insert into student(id,name,age) VALUES(2,'李四',24);
insert into student(name,id,age) VALUES('王五',3,12);
#批量插入数据
#insert into 表名 VALUES(按照表中的所有字段顺序对应插入),(),(),.....;
insert into student values(4,'lucy',15,'女'),(5,'小明',15,'男'),(6,'小红',16,'女');

===================================================

数据的修改与删除

#数据的修改与删除
#修改数据
#表的所有当前行的class字段数据修改值
#update 表 set 字段 = 字段值;
update student set class = '二班';
#修改表的指定行数的某一字段
update student set sex = '男' where id = 2;
#按条件修改某一行的某几个字段
update student set name = '张三',age = 11, sex = '男',class = '三班' where id = 3; 

#删除数据
#按条件删除
delete from student where name = 'lili2';
#整体删除(将当前表中的所有数据都删除)
delete from student;

#在查询，修改和删除时都可以根据条件进行删除

=====================================================

查询列与去重

#查询列与去重
#查询所有列
select * from student;
#查询指定列
#select 类名.... from 表名;
select name,class from student; 
#查询指定列，并指定别名  在多表查询时可能会用到，因为当多表中有相同字段名时用别名区分
#select 列名 '别名'...... from 表名;
select name'姓名',class '班级' from student;

#合并列查询
#select concat(列名,.....) '别名' from 表名;
select concat(class,'-',name) '班级-姓名' from student;
#合并查询可以做算术查询
select name '姓名',(servlet + jsp) '总成绩' from student;
#查询时添加常量
#select '常量列' from 表名 商量列会自动附加查询结果的相应位置
select name '姓名',age '年龄',(servlet + jsp) '总成绩',class '班级','河北工业大学' from student;
#查询时去除重复数据
#select DISTINCT 字段名...(多个字段只要组合不重复便不会去重) from 表名;
select DISTINCT age from student;

================================================

条件查询-

比较条件

#条件查询-条件比较
#比较条件 >,<,=,>=,<=,BETWEEN
select name,sex,class from student where age > 14;
select name,sex,class from student where age BETWEEN 1 and 50;

逻辑条件

#条件查询-逻辑条件
#逻辑条件 and,or
select * from student where jsp > 80 and jsp < 100 and sex = '男'; 
select * from student where jsp > 90 or servlet > 90;
select * from student where (jsp > 80 and servlet > 80) or sex = '女';

判空条件与模糊条件

#条件查询-判空条件与模糊条件
#判空条件 is null,is not null,<>不等于; 
select * from student where name = '';
select * from student where name <> '';#<> ''代表的意思是：不是''也不是null
SELECT * from student where name is null; 
select * from student where name is not null;
#模糊条件 LIKE 
#模糊查询主要用来查询字符串，只要字符串包含其中字符串即可
#like要配合_或者%使用,_匹配单个字符%匹配0-多个字符 张%表示以张开头
#匹配字符串有几个字符的 ___,_张_组合
select * from student where name like '%张%';
select * from student where name like '张%';
select * from student where name like '张__';
select * from student where name like '_张_';

==================================================

聚合查询

#聚合查询 mysql默认情况下对关键字不区分大小写
#求和sum
#select sum(字段名) from 表名 条件 用于给数字类型的字段进行求值使用的
select sum(jsp) 'JSP成绩' from student where class='二班';
#平均值avg 
select avg(servlet) 'SERVLET平均成绩' from student where class = '二班';
#最大值max
select max(jsp) '最高分' from student where class = '三班';
#最小值min
select min(servlet) '最高分' from student where class = '三班';
#计数count(..) 括号里面一般不使用*因为效率低，一般使用某个字段
SELECT count(name) from student where jsp > 90 and  class = '三班';

===================================================

分页查询 

#分页查询
#limit 可以有两个参数 第一个参数是间隔几条，第二个参数查询几条,当只有一个参数时默认为第二个参数
#查询前多少条数据
select * from student LIMIT 5;
select * from student where class is not null limit 3;
select * from student where class is not null limit 2,3;
#把当前查询结果进行分页
#select 字段 from 表名 [WHERE.....] LIMIT (pageNum-1)*total,viewPages;

==========================================

排序与分组查询

#排序与分组查询
#order by 字段名 asc/desc 默认正序排序 asc, 降序排序 desc .order by 要放在所有查询条件的最后
select * from student order by age desc;
select * from student where name is not null order by age desc;
#分组查询
#group by 把查询的结果按字段名分组 查询字段最好是group by 后面的字段
select sex,count(sex) from student where sex is not null group by sex;
select class,count(class) from student where class is not null group by class;

#having 对聚合分组进行筛选 必须在 group by之后
select class, count(class)'班级人数' from student where class is not null group by class having count(class) > 1;
select class,count(class) '班级人数',max(jsp) 'JSP最高分' from student where class is not null group by class having max(jsp) > 90 order by class;

where > group by > order by > limit
====================================================

数据约束 对用户操作表的数据进行约束，在创建表的时候规定某一列的数据的权限或者格式

=========================================


默认值与非空

默认值约束
字段名 数据类型 default 默认值

#在创建表的时候如果给字段设置了默认值，再插入字段时没有对设置了默认值的字段插入数据，那么这条数据的该字段的值为默认值
#设置了默认值的字段可以插入null值
create table tab_default(
id int(4),
name varchar(10) default '默认值',
age int(2) default 10
)

#字段名 数据类型 not null 
#在创建表的时候设置了 not null 约束的字段在进行插入数据操作时必须要填值
create table tab_notNull(
id int(4),
name varchar(10) not null,
sex varchar(2)
)

=====================================

唯一约束

#唯一约束 对字段设置了唯一约束 字段值不能重复
#字段名 数据类型 UNIQUE
#创建表时设置了唯一约束的字段，在插入数据时不能与表中其他数据的该字段的字段值相同，设置了唯一约束的字段可以插入多个null,null这个值不在唯一约束的约束范围内 
create table tab_unique(
id int(4),
name varchar(10) unique
)

===============================
主键

#主键 PRIMARY KEY 作用：非空加唯一
#主键作为一条数据的唯一标识，这个主键没有业务上的意义，只是为了能够明确的指向某条数据
#给增删改操作提供指向
create table tab_primarykey(
id int(10) primary key,
name varchar(10)
)
describe tab_primarykey;
#设置为主键约束的字段，必须非空且唯一

=====================================

自增长

#自增长 auto_increment
#自增长，数字类型的主键使用
#该字段可以不填值了，该字段的值会自动增长
#当给整型的数字类型主键设置auto_increment约束时，主键在做insert操作时，可以不用手动填值
#会从1自动增长
#当我们使用自增长后，使用delete不会破坏自增长，删除其中一条数据，数据库中的数据会继续记录增长并不会重新增长
#例如：我们有4条数据，我们把第三条删除，我们再插入一条数据，这条数据的id为5
#但使用truncate table 表名时，只保留表的结构其他全部重置，（相当于删除表并重新建表）此时再插入数据会从1重新开始
create table tab_increment(
id int(4) primary key auto_increment,
name varchar(10)
)

=====================================================

外键

#外键
#用来约束两种表,用来解决数据冗余问题（数据的重复）
#constraint emp_dep_fk foreign key(d_id) references dept(id)
#constraint emp_dep_fk(自己定义) foreign key(本表中设置为外键的字段) references 校验外键的表(校验外键表中的字段)
#设置了外键的字段的值不能随便填写，只能填外键表中关联的字段存在的值
#被约束的表称为副表，即拥有主键和外键的表
#约束其他表的表称为主表，即副表外键关联的表
#***注意
#添加数据：先添加主表，再添加副表
#修改数据：先修改副表，再修改主表
#删除数据：先删除副表，再删除主表
#外键—级联操作
#用来同步主表和副表相关联数据，一改则改
#需要在主表的外键后面加 on update cascade(修改添加数据) on delete CASCADE(删除数据)

=====================================================

三大范式

#三大范式
#设计原则：建表的基本原则
#第一范式：要求表的每个字段都是不可分割，独立的单元
#第二范式：满足第一范式的基础上，每张表只能表达一个意思。表的每一个字段都依赖于表的主键
#第三范式：满足第二范式，每张表的除主键外的其他字段只和主键有直接决定依赖
#总结：
#第一范式保证字段对应的值不可分割

=====================================================

高级查询

#高级查询
#in 查询所有id在括号之内的 类似高级版的or查询
#not in 与in相反
#select 全部（字段名...） from student where 字段名 (not)in (字段值......);
select * from student where id not in (2,3);
select * from student;
#EXISTS(select查询语句) 
#是否括号中的查询语句有查询结果，如果有返回true,没有返回false
#select * from emp where id = 1 and exists(select d_id from department where d_no = 001);
#只有where id = 1 和 exists()都有结果时才会返回
#括号里的查询语句能查出什么不重要，重要的是能不能查出结果来
#not EXISTS 与 EXISTS相反

#子查询
#通过子查询得到符合更多条件(更复杂)的结果
#每个班级男女占班级总人数的百分比
select s0.class,s0.sex,count(s0.sex) '个数',(select count(s2.sex) from student s2 where s2.class = s0.class) '班级人数',count(s0.sex)/(select count(s1.sex) from student s1 where s1.class = s0.class) '百分比' from student s0 where class is not null group by class,sex

#内连接查询
#利用子查询会单独建一张临时表来保存子查询结果，等全体查询结束后会删除掉临时表，影响性能
select e.*,d.d_id,d.d_no,d.d_desc from emp e,dept d where e.d_id = d.d_id and e.id = 3
select e.*,d.d_id,d.d_no,d.d_desc from emp e INNER JOIN dept d on d.d_id = e.d_id where e.id =3
#inner join 内连接 表 on 与外面的关系的字段条件 where 主表(from后面的表)的字段条件

#左外连接查询
#右外连接查询
#左外连接查询
#left JOIN 
#对于外连接要区分主表和连接表，主表的数据都可以展示，
#连接表的数据有和主表关联就可以展示，没有关联上主表且主表有数据就显示null
select d.*,e.e_name,e.e_no from dept d left join emp e on e.d_id = d.d_id
#右外连接查询
select d.*,e.e_name,e.e_nofrom dept d right join emp e on e.d_id = d.d_id
#外连接 
#左外连接 左边的表是主表 右边的是连接表
#右外连接 左边的是连接表 右边的表是主表
#**注意不论左外连接还是右外连接，都要考虑用哪个表是主表，哪些表是是连接表，比较常用的是左外连接查询

#自连接查询
#自连接查询 自己连接自己查询,通常使用左外连接实现
#
create table area(
code varchar(10) primary key,
name varchar(10),
paren_code varchar(10) 
)
#通过自连接查询城市并显示所在省
select c.*,p.name '所在省' from area c left join area p on p.code = c.paren_code where c.paren_code <> 0  
#通过自连接查询编号为’0002000101‘的三级城市并显示其所在城市及省
select x.*,c.name '所在市',p.name '所在省' from area x left join area c on c.code = x.paren_code 
left join area p on c.paren_code = p.code where  x.code = '0002000101'

=====================================================

存储过程 带有逻辑的sql语句

存储过程的特点
1.执行效率比较快！存储过程是在数据库的服务器端执行
2.移植性很差！不同的数据库的存储过程是不能移植。消耗服务器资源
存储过程在银行项目中比较常见，互联网的项目比较少见
#存储过程
#创建存储过程
delimiter $
create procedure pro_test()
#开始
begin
#逻辑
select * from area;
 #结束
end $
#执行存储过程
call pro_test()

#带参数的存储过程
delimiter $
create procedure pro_find_area_bycode(in c varchar(10))#参数
begin 
select * from area where code = c;
end $
call pro_find_area_bycode('0002')
#有返回值的带参数的存储过程
delimiter $
create procedure pro_concat(in a varchar(10),b varchar(10),out res varchar(30))
begin
 set res = concat(a,'-',b);
end $
set @str1 := '';#设置定义变量 set @变量名 := 变量初始化值
call pro_concat('hello','word',@str)
select @str '返回值'
#存储过程
#输入参数 create procedure 存储过程名(in 参数名,数据类型.....)
#输出参数 create procedure 存储过程名(in 参数名,数据类型,.....,out 参数名，数据类型,......)
#使用有输出参数的存储过程，我们需要在外面定义变量用来接收存储过程的输出参数的值（返回值）
#在执行存储过程 call 存储过程名([参数名..],[@变量名]...)

#输入输出参数 inout 具有in和out的双重功能
delimiter $
create procedure pro_addstr(INOUT s varchar(50))
begin
set s = concat(s,'!!!'); 
end $
set @s := 'helloword'
call pro_addstr(@s)
select @s '返回值'

#存储过程的判断
delimiter $
create procedure pro_abs(in i int(10),out abs int(10))
begin
if i < 0 then set abs = i*-1;
else set abs = i;
#else if 
end if;
end $

set @num := 0;
call pro_abs(10,@num)
select @num

#存储过程的循环
delimiter $
create procedure pro_addnum1(in num int(2),out res int(10))
BEGIN
declare i int(2) default 1;
declare r int(2) default 0;
while i <= num DO
set r = r + i;
set i = i + 1;
end while;

set  res = r;

end $

set @result := 0

call pro_addnum1(4,@result)
select @result '和'

#查询结果赋值给变量与删除存储过程
delimiter $
create procedure pro_areaname1(in c varchar(10),out n varchar(10))
begin
select name into n from area where code = c;
end $
set @areaname := '';
call pro_areaname1('0002',@areaname)
select @areaname
#查看存储过程列表 show procedure status
#删除存储过程 drop procedure pro_areaname drop procedure pro_addnum

=====================================================
#触发器
#作用： 当操作了某张表是会触发一些动作/行为，可以使用触发器完成
#触发器的语法四要素
#1 监视地点 table
#2 监视事件 insert/UPDATE.DELETE
#3 触发时间 after/before
#4 触发事件 insert/update,delete
#create trigger 触发器名
#after/before insert/update/delete on 表名
#for each row#
#bgin
#逻辑
#end;

select * from student
create table logger(
id int(10) primary key auto_increment,
content varchar(255)
)
#在向student表新增数据时（之后）,向日志logger插入一条数据（新增了一条数据）
create trigger tri_log after insert on student 
FOR each row#
BEGIN
insert into logger(content) values('新增一条数据');
end;
insert into student VALUES(11,'58max','19','男','二班',99,100)

select * from logger

触发器的删除 drop trigger 触发器的名称

=====================================================
函数
见MySQL函数大全
自定义函数 一定有返回值
create function 函数名（[变量名,数据类型]）returns 数据类型
begin
逻辑（一定有return 值）
end;
create function fn_getCount() retruns int 
begin 
declare i int(10);
select count(id) into i from studnet;
return i;
end;



=====================================================

主键 能够凭借这个属性区分元组，即这个属性是每条记录的唯一性
外键 和其他表之间的联系 
具有外键的表成为外键表
只具有主键的表称为主键表

查询最重要的两个字 ： 顺序

distnct 去重

between 在信息之间进行过滤,在某个范围
select * from emp
where sal>1500 and  sal <=  3000
等价于
select * from emp
where sal between 1500 and 300



in 属于若干个孤立的值
select * from emp where sal in (1500,3000,5000)
等价于 selecr * from emp where sal = 1500 or sal = 3000 and sal = 5000

top 表示 前面的 SQL用 top分页 Orcal用 rownum分页

select top2 * from emp 把最前面的两个输出

order by *** 按照***排序
desc 降序 不写默认是升序排序

null  空值
null 不能参与 <> 、!=、=、>、< 
select * from emp 
where coll is not null
如果向与null进行比较 只能使用 is ,is not 
0与null不一样，null表示空值，没有值，0是一个确定的值 
任何类型的数据都可以为null'
null不能参与任何数学运算，任何数字与null参与数学运算结果均为null
当进行数学运算时 可采用 isnull（comm，0），如果comm为空，则返回0

事务的隔离级别



1.脏读

2.不可重复读

3.幻读

4.序列化

